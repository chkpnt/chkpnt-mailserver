---

- name: Configure Redis for rspamd
  copy:
    src: etc/redis/rspamd.conf
    dest: /etc/redis/rspamd.conf
    owner: root
    group: redis
    mode: 0640
  notify:
    - restart redis

- name: Ensure user _rspamd is member of group redis
  user:
    name: _rspamd
    groups: redis
    append: yes

- name: Ensure working directory for Redis exists
  file:
    path: /var/lib/redis/rspamd
    state: directory
    owner: redis
    group: redis
    mode: 0750

- name: Enable server redis@rspamd and make sure it is running
  systemd:
    name: redis@rspamd
    enabled: yes
    state: started

- name: Enable local resolver (unbound) and make sure it is running
  systemd:
    name: unbound
    enabled: yes
    state: started

- name: Configure rspamd (static config)
  copy:
    src: etc/rspamd/
    dest: /etc/rspamd/
  notify:
    - restart rspamd

- name: Configure rspamd Controller worker
  template:
    src: etc/rspamd/local.d/worker-controller.inc.j2
    dest: /etc/rspamd/local.d/worker-controller.inc
  notify:
    - restart rspamd

- name: Configure DKIM-signing
  template:
    src: etc/rspamd/local.d/dkim_signing.conf.j2
    dest: /etc/rspamd/local.d/dkim_signing.conf
  notify:
    - restart rspamd

- name: Configure ARC-signing
  template:
    src: etc/rspamd/local.d/arc.conf.j2
    dest: /etc/rspamd/local.d/arc.conf
  notify:
    - restart rspamd

- name: Configure greylisting
  template:
    src: etc/rspamd/local.d/greylist.conf.j2
    dest: /etc/rspamd/local.d/greylist.conf
  notify:
    - restart rspamd

- name: Ensure directory for the private keys exists
  file: >
    path="{{ item.private_key | dirname }}" state=directory
    owner=_rspamd group=_rspamd mode=0500
  loop: "{{ mail_dkim_keys | json_query('[?copy_from]') }}"

- name: Copy keys for DKIM-signing
  copy: >
    src="{{ item.copy_from }}" dest="{{ item.private_key }}"
    owner=_rspamd group=_rspamd mode=0400
  loop: "{{ mail_dkim_keys | json_query('[?copy_from]') }}"

# Notice: Keys have to be accessible for user _rspamd
- name: Check if keys for DKIM-signing are present
  block:
    - stat: # noqa 502
        path: "{{ item }}"
      loop: "{{ mail_dkim_keys | map(attribute='private_key') | list | unique }}"
      register: check_dkim_keys
    - set_fact: # noqa 502
        error_messages: >-
          {%- set keys_not_found = mail_dkim_keys | json_query("[?private_key=='" ~ item ~ "']") -%}
          {%- set new_messages = [] -%}
          {%- for key_not_found in keys_not_found -%}
            {%- if new_messages.append(
              "ERROR: DKIM-signing for " ~ key_not_found.domain ~ " will not work as the expected key is missing. " ~
              "To generate a key and an appropriate TXT-RR, you may want to call " ~
              "'rspamadm dkim_keygen -d " ~ key_not_found.domain ~ " -s " ~ key_not_found.selector ~ " -k " ~ key_not_found.private_key ~ "'")
            -%}{%- endif -%}
          {%- endfor -%}
          {{ error_messages + new_messages }}
      loop: "{{ check_dkim_keys | json_query('results[?stat.exists==`false`].item') }}"

- name: Configure spam actions
  template:
    src: etc/rspamd/local.d/actions.conf.j2
    dest: /etc/rspamd/local.d/actions.conf
  notify:
    - restart rspamd

- name: Enable rspamd and make sure it is running
  systemd:
    name: rspamd
    enabled: yes
    state: started

- name: Enable clamav-unofficial-sigs
  lineinfile:
    path: /etc/clamav-unofficial-sigs/user.conf
    regexp: '#user_configuration_complete='
    line: 'user_configuration_complete="yes"'

# clamd won't start if /var/lib/clamav doesn't contain databases, therefore I'm
# adding an empty "whitelist.ign2". Freshclam is fetching the regular databases.
# Attention: Until freshclam is executed the first time, there is no protection
# by clamd.
- name: Ensure a database exists for clamd
  copy:
    content: "# The signatures listed here will be whitelisted:\n"
    dest: /var/lib/clamav/whitelist.ign2
    force: no
    owner: vscan
    group: vscan
    mode: 0644

- name: Enable clamd and make sure it is running
  systemd:
    name: clamd
    enabled: yes
    state: started
