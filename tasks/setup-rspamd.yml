---
- name: Configure Redis for rspamd
  ansible.builtin.copy:
    src: etc/redis/rspamd.conf
    dest: /etc/redis/rspamd.conf
    owner: root
    group: redis
    mode: "0640"
  notify:
    - restart redis

- name: Ensure user _rspamd is member of group redis
  ansible.builtin.user:
    name: _rspamd
    groups: redis
    append: true

- name: Ensure working directory for Redis exists
  ansible.builtin.file:
    path: /var/lib/redis/rspamd
    state: directory
    owner: redis
    group: redis
    mode: "0750"

- name: Enable server redis@rspamd and make sure it is running
  ansible.builtin.systemd:
    name: redis@rspamd
    enabled: true
    state: started

- name: Enable local resolver (unbound) and make sure it is running
  ansible.builtin.systemd:
    name: unbound
    enabled: true
    state: started

- name: Configure rspamd (static config)
  ansible.builtin.copy:
    src: etc/rspamd/
    dest: /etc/rspamd/
  notify:
    - restart rspamd

- name: Configure rspamd Controller worker
  ansible.builtin.template:
    src: etc/rspamd/local.d/worker-controller.inc.j2
    dest: /etc/rspamd/local.d/worker-controller.inc
  notify:
    - restart rspamd

- name: Configure DKIM-signing
  ansible.builtin.template:
    src: etc/rspamd/local.d/dkim_signing.conf.j2
    dest: /etc/rspamd/local.d/dkim_signing.conf
  notify:
    - restart rspamd

- name: Configure ARC-signing
  ansible.builtin.template:
    src: etc/rspamd/local.d/arc.conf.j2
    dest: /etc/rspamd/local.d/arc.conf
  notify:
    - restart rspamd

- name: Configure greylisting
  ansible.builtin.template:
    src: etc/rspamd/local.d/greylist.conf.j2
    dest: /etc/rspamd/local.d/greylist.conf
  notify:
    - restart rspamd

- name: Configure allowlists for Multimap module
  ansible.builtin.template:
    src: etc/rspamd/local.d/{{ item }}.j2
    dest: /etc/rspamd/local.d/{{ item }}
  loop:
    - allowlist.sender.domain.map
    - allowlist.sender.email.map
  notify:
    - restart rspamd

- name: Ensure directory for the private keys exists
  ansible.builtin.file:
    path: "{{ item.private_key | dirname }}"
    state: directory
    owner: _rspamd
    group: _rspamd
    mode: "0500"
  loop: "{{ mail_dkim_keys | json_query('[?copy_from]') }}"

- name: Copy keys for DKIM-signing
  ansible.builtin.copy:
    src: "{{ item.copy_from }}"
    dest: "{{ item.private_key }}"
    owner: _rspamd
    group: _rspamd
    mode: "0400"
  loop: "{{ mail_dkim_keys | json_query('[?copy_from]') }}"

# Notice: Keys have to be accessible for user _rspamd
- name: Check if keys for DKIM-signing are present
  block:
    - ansible.builtin.stat: # noqa: name[missing]
        path: "{{ item }}"
      loop: "{{ mail_dkim_keys | map(attribute='private_key') | list | unique }}"
      register: check_dkim_keys
    - ansible.builtin.set_fact: # noqa: name[missing]
        error_messages: >-
          {%- set keys_not_found = mail_dkim_keys | json_query("[?private_key=='" ~ item ~ "']") -%}
          {%- set new_messages = [] -%}
          {%- for key_not_found in keys_not_found -%}
            {%- if new_messages.append(
              "ERROR: DKIM-signing for " ~ key_not_found.domain ~ " will not work as the expected key is missing. " ~
              "To generate a key and an appropriate TXT-RR, you may want to call " ~
              "'rspamadm dkim_keygen -d " ~ key_not_found.domain ~ " -s " ~ key_not_found.selector ~ " -k " ~ key_not_found.private_key ~ "'")
            -%}{%- endif -%}
          {%- endfor -%}
          {{ error_messages + new_messages }}
      loop: "{{ check_dkim_keys | json_query('results[?stat.exists==`false`].item') }}"

- name: Configure spam actions
  ansible.builtin.template:
    src: etc/rspamd/local.d/actions.conf.j2
    dest: /etc/rspamd/local.d/actions.conf
  notify:
    - restart rspamd

- name: Enable rspamd and make sure it is running
  ansible.builtin.systemd:
    name: rspamd
    enabled: true
    state: started

- name: Enable clamav-unofficial-sigs
  ansible.builtin.lineinfile:
    path: /etc/clamav-unofficial-sigs/user.conf
    regexp: "#user_configuration_complete="
    line: user_configuration_complete="yes"

# clamd won't start if /var/lib/clamav doesn't contain the daily and main databases,
# therefore freshclam needs to be executed once.
- name: Execute freshclam
  ansible.builtin.systemd:
    name: freshclam
    state: started

- name: Adding a whiteliste database for clamd
  ansible.builtin.copy:
    content: "# The signatures listed here will be whitelisted:\n"
    dest: /var/lib/clamav/whitelist.ign2
    force: false
    owner: vscan
    group: vscan
    mode: "0644"

- name: Enable clamd and make sure it is running
  ansible.builtin.systemd:
    name: clamd
    enabled: true
    state: started
